{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { NetworkType } from '@airgap/beacon-types';\nimport { BlockExplorer } from './block-explorer';\nexport class TezblockBlockExplorer extends BlockExplorer {\n  constructor() {\n    let rpcUrls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      [NetworkType.MAINNET]: 'https://tezblock.io',\n      [NetworkType.DELPHINET]: 'https://delphinet.tezblock.io',\n      [NetworkType.EDONET]: 'https://edonet.tezblock.io',\n      [NetworkType.FLORENCENET]: 'https://florencenet.tezblock.io',\n      [NetworkType.GRANADANET]: 'https://granadanet.tezblock.io',\n      [NetworkType.HANGZHOUNET]: 'https://hangzhounet.tezblock.io',\n      [NetworkType.ITHACANET]: 'https://ithacanet.tezblock.io',\n      [NetworkType.JAKARTANET]: 'https://jakartanet.tezblock.io',\n      [NetworkType.CUSTOM]: 'https://jakartanet.tezblock.io'\n    };\n    super(rpcUrls);\n    this.rpcUrls = rpcUrls;\n  }\n  getAddressLink(address, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const blockExplorer = yield this.getLinkForNetwork(network);\n      return `${blockExplorer}/account/${address}`;\n    });\n  }\n  getTransactionLink(transactionId, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const blockExplorer = yield this.getLinkForNetwork(network);\n      return `${blockExplorer}/transaction/${transactionId}`;\n    });\n  }\n}","map":{"version":3,"names":["NetworkType","BlockExplorer","TezblockBlockExplorer","constructor","rpcUrls","arguments","length","undefined","MAINNET","DELPHINET","EDONET","FLORENCENET","GRANADANET","HANGZHOUNET","ITHACANET","JAKARTANET","CUSTOM","getAddressLink","address","network","blockExplorer","getLinkForNetwork","getTransactionLink","transactionId"],"sources":["../../../src/utils/tezblock-blockexplorer.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkBA,WAAW,QAAQ,sBAAsB;AAC3D,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAM,MAAOC,qBAAsB,SAAQD,aAAa;EACtDE,YAAA,EAWG;IAAA,IAVeC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4C;MAC1D,CAACL,WAAW,CAACQ,OAAO,GAAG,qBAAqB;MAC5C,CAACR,WAAW,CAACS,SAAS,GAAG,+BAA+B;MACxD,CAACT,WAAW,CAACU,MAAM,GAAG,4BAA4B;MAClD,CAACV,WAAW,CAACW,WAAW,GAAG,iCAAiC;MAC5D,CAACX,WAAW,CAACY,UAAU,GAAG,gCAAgC;MAC1D,CAACZ,WAAW,CAACa,WAAW,GAAG,iCAAiC;MAC5D,CAACb,WAAW,CAACc,SAAS,GAAG,+BAA+B;MACxD,CAACd,WAAW,CAACe,UAAU,GAAG,gCAAgC;MAC1D,CAACf,WAAW,CAACgB,MAAM,GAAG;KACvB;IAED,KAAK,CAACZ,OAAO,CAAC;IAZE,KAAAA,OAAO,GAAPA,OAAO;EAazB;EAEaa,cAAcA,CAACC,OAAe,EAAEC,OAAgB;;MAC3D,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACF,OAAO,CAAC;MAE3D,OAAO,GAAGC,aAAa,YAAYF,OAAO,EAAE;IAC9C,CAAC;;EACYI,kBAAkBA,CAACC,aAAqB,EAAEJ,OAAgB;;MACrE,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACF,OAAO,CAAC;MAE3D,OAAO,GAAGC,aAAa,gBAAgBG,aAAa,EAAE;IACxD,CAAC"},"metadata":{},"sourceType":"module"}