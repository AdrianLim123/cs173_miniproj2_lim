{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ready, crypto_generichash } from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic sender identifier based on a public key\n *\n * @param publicKey\n */\nexport const getSenderId = publicKey => __awaiter(void 0, void 0, void 0, function* () {\n  yield ready;\n  const buffer = Buffer.from(crypto_generichash(5, Buffer.from(publicKey, 'hex')));\n  return bs58check.encode(buffer);\n});","map":{"version":3,"names":["ready","crypto_generichash","bs58check","getSenderId","publicKey","__awaiter","buffer","Buffer","from","encode"],"sources":["../../../src/utils/get-sender-id.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,KAAK,EAAEC,kBAAkB,QAAQ,oBAAoB;AAC9D,OAAO,KAAKC,SAAS,MAAM,WAAW;AAEtC;;;;;;;AAOA,OAAO,MAAMC,WAAW,GAAUC,SAAiB,IAAqBC,SAAA;EACtE,MAAML,KAAK;EAEX,MAAMM,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACP,kBAAkB,CAAC,CAAC,EAAEM,MAAM,CAACC,IAAI,CAACJ,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;EAEhF,OAAOF,SAAS,CAACO,MAAM,CAACH,MAAM,CAAC;AACjC,CAAC"},"metadata":{},"sourceType":"module"}