{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as bs58check from 'bs58check';\nimport { ready, crypto_generichash, crypto_sign_seed_keypair, from_string, randombytes_buf, crypto_secretbox_NONCEBYTES, crypto_secretbox_easy, crypto_secretbox_open_easy, crypto_sign_ed25519_pk_to_curve25519, crypto_sign_ed25519_sk_to_curve25519, crypto_box_seal, crypto_box_seal_open } from 'libsodium-wrappers';\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n/**\n * Convert a value to hex\n *\n * @param value\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function toHex(value) {\n  return Buffer.from(value).toString('hex');\n}\n/**\n * Get the hex hash of a value\n *\n * @param key\n */\nexport function getHexHash(key) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    return toHex(crypto_generichash(32, key));\n  });\n}\n/**\n * Get a keypair from a seed\n *\n * @param seed\n */\nexport function getKeypairFromSeed(seed) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    return crypto_sign_seed_keypair(crypto_generichash(32, from_string(seed)));\n  });\n}\n/**\n * Encrypt a message with a shared key\n *\n * @param message\n * @param sharedKey\n */\nexport function encryptCryptoboxPayload(message, sharedKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const nonce = Buffer.from(randombytes_buf(crypto_secretbox_NONCEBYTES));\n    const combinedPayload = Buffer.concat([nonce, Buffer.from(crypto_secretbox_easy(Buffer.from(message, 'utf8'), nonce, sharedKey))]);\n    return toHex(combinedPayload);\n  });\n}\n/**\n * Decrypt a message with a shared key\n *\n * @param payload\n * @param sharedKey\n */\nexport function decryptCryptoboxPayload(payload, sharedKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const nonce = payload.slice(0, crypto_secretbox_NONCEBYTES);\n    const ciphertext = payload.slice(crypto_secretbox_NONCEBYTES);\n    return Buffer.from(crypto_secretbox_open_easy(ciphertext, nonce, sharedKey)).toString('utf8');\n  });\n}\n/**\n * Encrypt a message with a public key\n *\n * @param payload\n * @param publicKey\n */\nexport function sealCryptobox(payload, publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const kxSelfPublicKey = crypto_sign_ed25519_pk_to_curve25519(Buffer.from(publicKey)); // Secret bytes to scalar bytes\n    const encryptedMessage = crypto_box_seal(payload, kxSelfPublicKey);\n    return toHex(encryptedMessage);\n  });\n}\n/**\n * Decrypt a message with public + private key\n *\n * @param encryptedPayload\n * @param publicKey\n * @param privateKey\n */\nexport function openCryptobox(encryptedPayload, publicKey, privateKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const kxSelfPrivateKey = crypto_sign_ed25519_sk_to_curve25519(Buffer.from(privateKey)); // Secret bytes to scalar bytes\n    const kxSelfPublicKey = crypto_sign_ed25519_pk_to_curve25519(Buffer.from(publicKey)); // Secret bytes to scalar bytes\n    const decryptedMessage = crypto_box_seal_open(encryptedPayload, kxSelfPublicKey, kxSelfPrivateKey);\n    return Buffer.from(decryptedMessage).toString();\n  });\n}\n/**\n * Get an address from the public key\n *\n * @param publicKey\n */\nexport function getAddressFromPublicKey(publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ready;\n    const prefixes = {\n      // tz1...\n      edpk: {\n        length: 54,\n        prefix: Buffer.from(new Uint8Array([6, 161, 159]))\n      },\n      // tz2...\n      sppk: {\n        length: 55,\n        prefix: Buffer.from(new Uint8Array([6, 161, 161]))\n      },\n      // tz3...\n      p2pk: {\n        length: 55,\n        prefix: Buffer.from(new Uint8Array([6, 161, 164]))\n      }\n    };\n    let prefix;\n    let plainPublicKey;\n    if (publicKey.length === 64) {\n      prefix = prefixes.edpk.prefix;\n      plainPublicKey = publicKey;\n    } else {\n      const entries = Object.entries(prefixes);\n      for (let index = 0; index < entries.length; index++) {\n        const [key, value] = entries[index];\n        if (publicKey.startsWith(key) && publicKey.length === value.length) {\n          prefix = value.prefix;\n          const decoded = bs58check.decode(publicKey);\n          plainPublicKey = decoded.slice(key.length, decoded.length).toString('hex');\n          break;\n        }\n      }\n    }\n    if (!prefix || !plainPublicKey) {\n      throw new Error(`invalid publicKey: ${publicKey}`);\n    }\n    const payload = crypto_generichash(20, Buffer.from(plainPublicKey, 'hex'));\n    return bs58check.encode(Buffer.concat([prefix, Buffer.from(payload)]));\n  });\n}\n/**\n * Get the recipient string used in the matrix message\n *\n * @param recipientHash\n * @param relayServer\n */\nexport function recipientString(recipientHash, relayServer) {\n  return `@${recipientHash}:${relayServer}`;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */","map":{"version":3,"names":["bs58check","ready","crypto_generichash","crypto_sign_seed_keypair","from_string","randombytes_buf","crypto_secretbox_NONCEBYTES","crypto_secretbox_easy","crypto_secretbox_open_easy","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519","crypto_box_seal","crypto_box_seal_open","toHex","value","Buffer","from","toString","getHexHash","key","getKeypairFromSeed","seed","encryptCryptoboxPayload","message","sharedKey","nonce","combinedPayload","concat","decryptCryptoboxPayload","payload","slice","ciphertext","sealCryptobox","publicKey","kxSelfPublicKey","encryptedMessage","openCryptobox","encryptedPayload","privateKey","kxSelfPrivateKey","decryptedMessage","getAddressFromPublicKey","prefixes","edpk","length","prefix","Uint8Array","sppk","p2pk","plainPublicKey","entries","Object","index","startsWith","decoded","decode","Error","encode","recipientString","recipientHash","relayServer"],"sources":["../../../src/utils/crypto.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}